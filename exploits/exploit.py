"""
Base exploit class
"""
import os
import subprocess
from constants import LOW_RELIABILITY, PLAYGROUND_PATH, color_print, ARCHITECTURE_GENERIC

class Exploit:
	def __init__(self):
		self.name = "CVE-WHOOPS-BASE-CLASS"
		self.type = "not a real os"
		self.brief_desc = "A base class for exploits"
		self.reliability = LOW_RELIABILITY
		self.vulnerable_kernels = []
		self.architecture = ARCHITECTURE_GENERIC
		self.source_c_path = "Need a source path to the exploit file to compile"
		self.compilation_path = os.path.join(PLAYGROUND_PATH, "exploit")
		self.compilation_command = ["gcc", self.source_c_path, "-o", self.compilation_path]
		self.exploit_command = "./pwn -o allyourbase.txt -i l33t.skills"

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[-] system appears not to be vulnerable to {}".format(self.name), color="red")
		return False

	def shell_results(self, shell_command):
		p = subprocess.Popen(
			shell_command,
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=True
		)
		return p.communicate()

	def exploit_failure(self, failure_reason):
		color_print("\t[-] exploitation failed: {}".format(failure_reason), color="red")

	def exploit(self):
		self.exploit_failure("whoops this is the base class. you need to write exploit logic")
