# SQL Schema for relevant data structures

# Table to hold exploit data relevant to searching for kernel-specific exploits
#   and finding relevant files to exploits in the kernelpop project file structure.
drop table if exists exploit;
create table exploit (
  id                          INT             AUTO_INCREMENT NOT NULL,
  os                          VARCHAR(20)     NOT NULL,
  name                        VARCHAR(50)     NOT NULL,
  earliest_kernel_version_id  INT             NOT NULL,
  latest_kernel_version_id    INT             NOT NULL,
  file_path                   VARCHAR(100)    NOT NULL,
  disclosure_date             DATE            NOT NULL
);

create table kernel (
  id                          INT             AUTO_INCREMENT NOT NULL,
  major_version               INT             NOT NULL,
  minor_version               INT             NOT NULL,
  release_version             INT             NOT NULL
);

# add in our exploits
insert into kernel (major_version, minor_version, release_version)
    values (4, 4, 21);
insert into kernel (major_version, minor_version, release_version)
    values (4, 8, 58);
insert into exploit (os, name, earliest_kernel_version_id, latest_kernel_version_id, file_path, disclosure_date)
    values ('linux', 'CVE-2017-100012', 1, 2, 'linux/CVE201710012', '2017-09-14');
